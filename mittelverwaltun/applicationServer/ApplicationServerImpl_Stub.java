// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package applicationServer;

public final class ApplicationServerImpl_Stub
    extends java.rmi.server.RemoteStub
    implements applicationServer.ApplicationServer, java.rmi.Remote
{
    private static final long serialVersionUID = 2;
    
    private static java.lang.reflect.Method $method_addBestellung_0;
    private static java.lang.reflect.Method $method_addBestellung_1;
    private static java.lang.reflect.Method $method_addFBHauptkonto_2;
    private static java.lang.reflect.Method $method_addFBUnterkonto_3;
    private static java.lang.reflect.Method $method_addFirma_4;
    private static java.lang.reflect.Method $method_addInstitute_5;
    private static java.lang.reflect.Method $method_addKleinbestellung_6;
    private static java.lang.reflect.Method $method_addKontenZuordnung_7;
    private static java.lang.reflect.Method $method_addRolle_8;
    private static java.lang.reflect.Method $method_addRollenAktivitaet_9;
    private static java.lang.reflect.Method $method_addUser_10;
    private static java.lang.reflect.Method $method_addZVKonto_11;
    private static java.lang.reflect.Method $method_addZVTitel_12;
    private static java.lang.reflect.Method $method_addZVUntertitel_13;
    private static java.lang.reflect.Method $method_buche_14;
    private static java.lang.reflect.Method $method_buche_15;
    private static java.lang.reflect.Method $method_buche_16;
    private static java.lang.reflect.Method $method_buche_17;
    private static java.lang.reflect.Method $method_buche_18;
    private static java.lang.reflect.Method $method_buche_19;
    private static java.lang.reflect.Method $method_delBestellung_20;
    private static java.lang.reflect.Method $method_delBestellung_21;
    private static java.lang.reflect.Method $method_delFBHauptkonto_22;
    private static java.lang.reflect.Method $method_delFBUnterkonto_23;
    private static java.lang.reflect.Method $method_delFirma_24;
    private static java.lang.reflect.Method $method_delInstitute_25;
    private static java.lang.reflect.Method $method_delKleinbestellung_26;
    private static java.lang.reflect.Method $method_delKontenZuordnung_27;
    private static java.lang.reflect.Method $method_delRolle_28;
    private static java.lang.reflect.Method $method_delRollenAktivitaet_29;
    private static java.lang.reflect.Method $method_delUser_30;
    private static java.lang.reflect.Method $method_delZVKonto_31;
    private static java.lang.reflect.Method $method_delZVTitel_32;
    private static java.lang.reflect.Method $method_delZVUntertitel_33;
    private static java.lang.reflect.Method $method_getASKBestellung_34;
    private static java.lang.reflect.Method $method_getASKFirma_35;
    private static java.lang.reflect.Method $method_getAktivitaeten_36;
    private static java.lang.reflect.Method $method_getAvailableAccountBudget_37;
    private static java.lang.reflect.Method $method_getAvailableBudgetForAccount_38;
    private static java.lang.reflect.Method $method_getAvailableNoPurposeBudget_39;
    private static java.lang.reflect.Method $method_getBestellungen_40;
    private static java.lang.reflect.Method $method_getBestellungen_41;
    private static java.lang.reflect.Method $method_getCurrentHaushaltsjahrId_42;
    private static java.lang.reflect.Method $method_getDelKleinbestellungen_43;
    private static java.lang.reflect.Method $method_getFBHauptkonten_44;
    private static java.lang.reflect.Method $method_getFBKontenForUser_45;
    private static java.lang.reflect.Method $method_getFBKonto_46;
    private static java.lang.reflect.Method $method_getFBUnterkonten_47;
    private static java.lang.reflect.Method $method_getFachbereiche_48;
    private static java.lang.reflect.Method $method_getFirmen_49;
    private static java.lang.reflect.Method $method_getHaushaltsjahr_50;
    private static java.lang.reflect.Method $method_getInstitutZuordnungen_51;
    private static java.lang.reflect.Method $method_getInstituteWithAccounts_52;
    private static java.lang.reflect.Method $method_getInstitutes_53;
    private static java.lang.reflect.Method $method_getInstitutesWithAccounts_54;
    private static java.lang.reflect.Method $method_getInstitutesWithAccounts_55;
    private static java.lang.reflect.Method $method_getInstitutesWithMainAccounts_56;
    private static java.lang.reflect.Method $method_getKleinbestellung_57;
    private static java.lang.reflect.Method $method_getKleinbestellungen_58;
    private static java.lang.reflect.Method $method_getKostenarten_59;
    private static java.lang.reflect.Method $method_getLogList_60;
    private static java.lang.reflect.Method $method_getName_61;
    private static java.lang.reflect.Method $method_getNoPurposeFBHauptkonten_62;
    private static java.lang.reflect.Method $method_getNumberOfKontenzuordnungen_63;
    private static java.lang.reflect.Method $method_getOffeneBestellungen_64;
    private static java.lang.reflect.Method $method_getOffeneFBHauptkonten_65;
    private static java.lang.reflect.Method $method_getOffeneZVKonten_66;
    private static java.lang.reflect.Method $method_getReport_67;
    private static java.lang.reflect.Method $method_getRollen_68;
    private static java.lang.reflect.Method $method_getRollenFull_69;
    private static java.lang.reflect.Method $method_getStandardBestellung_70;
    private static java.lang.reflect.Method $method_getSwBeauftragte_71;
    private static java.lang.reflect.Method $method_getUser_72;
    private static java.lang.reflect.Method $method_getUsers_73;
    private static java.lang.reflect.Method $method_getUsers_74;
    private static java.lang.reflect.Method $method_getUsersByRole_75;
    private static java.lang.reflect.Method $method_getZVKonten_76;
    private static java.lang.reflect.Method $method_getZVKontenOnly_77;
    private static java.lang.reflect.Method $method_getZVTitelId_78;
    private static java.lang.reflect.Method $method_login_79;
    private static java.lang.reflect.Method $method_logout_80;
    private static java.lang.reflect.Method $method_portZVKonten_81;
    private static java.lang.reflect.Method $method_setAccountBudget_82;
    private static java.lang.reflect.Method $method_setBestellung_83;
    private static java.lang.reflect.Method $method_setBestellung_84;
    private static java.lang.reflect.Method $method_setFBHauptkonto_85;
    private static java.lang.reflect.Method $method_setFBUnterkonto_86;
    private static java.lang.reflect.Method $method_setFachbereich_87;
    private static java.lang.reflect.Method $method_setFirma_88;
    private static java.lang.reflect.Method $method_setHaushaltsjahr_89;
    private static java.lang.reflect.Method $method_setInstitute_90;
    private static java.lang.reflect.Method $method_setKontenZuordnung_91;
    private static java.lang.reflect.Method $method_setRolle_92;
    private static java.lang.reflect.Method $method_setUser_93;
    private static java.lang.reflect.Method $method_setZVKonto_94;
    private static java.lang.reflect.Method $method_setZVTitel_95;
    private static java.lang.reflect.Method $method_setZVUntertitel_96;
    
    static {
	try {
	    $method_addBestellung_0 = applicationServer.ApplicationServer.class.getMethod("addBestellung", new java.lang.Class[] {dbObjects.ASKBestellung.class});
	    $method_addBestellung_1 = applicationServer.ApplicationServer.class.getMethod("addBestellung", new java.lang.Class[] {dbObjects.StandardBestellung.class});
	    $method_addFBHauptkonto_2 = applicationServer.ApplicationServer.class.getMethod("addFBHauptkonto", new java.lang.Class[] {dbObjects.FBHauptkonto.class});
	    $method_addFBUnterkonto_3 = applicationServer.ApplicationServer.class.getMethod("addFBUnterkonto", new java.lang.Class[] {dbObjects.FBUnterkonto.class});
	    $method_addFirma_4 = applicationServer.ApplicationServer.class.getMethod("addFirma", new java.lang.Class[] {dbObjects.Firma.class});
	    $method_addInstitute_5 = applicationServer.ApplicationServer.class.getMethod("addInstitute", new java.lang.Class[] {dbObjects.Institut.class});
	    $method_addKleinbestellung_6 = applicationServer.ApplicationServer.class.getMethod("addKleinbestellung", new java.lang.Class[] {dbObjects.KleinBestellung.class});
	    $method_addKontenZuordnung_7 = applicationServer.ApplicationServer.class.getMethod("addKontenZuordnung", new java.lang.Class[] {dbObjects.FBHauptkonto.class, dbObjects.ZVKonto.class});
	    $method_addRolle_8 = applicationServer.ApplicationServer.class.getMethod("addRolle", new java.lang.Class[] {dbObjects.Rolle.class});
	    $method_addRollenAktivitaet_9 = applicationServer.ApplicationServer.class.getMethod("addRollenAktivitaet", new java.lang.Class[] {int.class, int.class});
	    $method_addUser_10 = applicationServer.ApplicationServer.class.getMethod("addUser", new java.lang.Class[] {dbObjects.Benutzer.class});
	    $method_addZVKonto_11 = applicationServer.ApplicationServer.class.getMethod("addZVKonto", new java.lang.Class[] {dbObjects.ZVKonto.class});
	    $method_addZVTitel_12 = applicationServer.ApplicationServer.class.getMethod("addZVTitel", new java.lang.Class[] {dbObjects.ZVTitel.class});
	    $method_addZVUntertitel_13 = applicationServer.ApplicationServer.class.getMethod("addZVUntertitel", new java.lang.Class[] {dbObjects.ZVUntertitel.class});
	    $method_buche_14 = applicationServer.ApplicationServer.class.getMethod("buche", new java.lang.Class[] {dbObjects.Benutzer.class, dbObjects.FBHauptkonto.class, dbObjects.FBHauptkonto.class, float.class});
	    $method_buche_15 = applicationServer.ApplicationServer.class.getMethod("buche", new java.lang.Class[] {dbObjects.Benutzer.class, dbObjects.FBHauptkonto.class, dbObjects.FBUnterkonto.class, float.class});
	    $method_buche_16 = applicationServer.ApplicationServer.class.getMethod("buche", new java.lang.Class[] {dbObjects.Benutzer.class, dbObjects.FBUnterkonto.class, dbObjects.FBHauptkonto.class, float.class});
	    $method_buche_17 = applicationServer.ApplicationServer.class.getMethod("buche", new java.lang.Class[] {dbObjects.Benutzer.class, dbObjects.ZVKonto.class, float.class});
	    $method_buche_18 = applicationServer.ApplicationServer.class.getMethod("buche", new java.lang.Class[] {dbObjects.Benutzer.class, dbObjects.ZVTitel.class, float.class});
	    $method_buche_19 = applicationServer.ApplicationServer.class.getMethod("buche", new java.lang.Class[] {dbObjects.Benutzer.class, dbObjects.ZVUntertitel.class, float.class});
	    $method_delBestellung_20 = applicationServer.ApplicationServer.class.getMethod("delBestellung", new java.lang.Class[] {dbObjects.ASKBestellung.class});
	    $method_delBestellung_21 = applicationServer.ApplicationServer.class.getMethod("delBestellung", new java.lang.Class[] {dbObjects.StandardBestellung.class});
	    $method_delFBHauptkonto_22 = applicationServer.ApplicationServer.class.getMethod("delFBHauptkonto", new java.lang.Class[] {dbObjects.FBHauptkonto.class});
	    $method_delFBUnterkonto_23 = applicationServer.ApplicationServer.class.getMethod("delFBUnterkonto", new java.lang.Class[] {dbObjects.FBUnterkonto.class});
	    $method_delFirma_24 = applicationServer.ApplicationServer.class.getMethod("delFirma", new java.lang.Class[] {dbObjects.Firma.class});
	    $method_delInstitute_25 = applicationServer.ApplicationServer.class.getMethod("delInstitute", new java.lang.Class[] {dbObjects.Institut.class});
	    $method_delKleinbestellung_26 = applicationServer.ApplicationServer.class.getMethod("delKleinbestellung", new java.lang.Class[] {dbObjects.KleinBestellung.class});
	    $method_delKontenZuordnung_27 = applicationServer.ApplicationServer.class.getMethod("delKontenZuordnung", new java.lang.Class[] {dbObjects.FBHauptkonto.class, dbObjects.ZVKonto.class});
	    $method_delRolle_28 = applicationServer.ApplicationServer.class.getMethod("delRolle", new java.lang.Class[] {dbObjects.Rolle.class});
	    $method_delRollenAktivitaet_29 = applicationServer.ApplicationServer.class.getMethod("delRollenAktivitaet", new java.lang.Class[] {int.class, int.class});
	    $method_delUser_30 = applicationServer.ApplicationServer.class.getMethod("delUser", new java.lang.Class[] {dbObjects.Benutzer.class});
	    $method_delZVKonto_31 = applicationServer.ApplicationServer.class.getMethod("delZVKonto", new java.lang.Class[] {dbObjects.ZVKonto.class});
	    $method_delZVTitel_32 = applicationServer.ApplicationServer.class.getMethod("delZVTitel", new java.lang.Class[] {dbObjects.ZVTitel.class});
	    $method_delZVUntertitel_33 = applicationServer.ApplicationServer.class.getMethod("delZVUntertitel", new java.lang.Class[] {dbObjects.ZVUntertitel.class});
	    $method_getASKBestellung_34 = applicationServer.ApplicationServer.class.getMethod("getASKBestellung", new java.lang.Class[] {int.class});
	    $method_getASKFirma_35 = applicationServer.ApplicationServer.class.getMethod("getASKFirma", new java.lang.Class[] {});
	    $method_getAktivitaeten_36 = applicationServer.ApplicationServer.class.getMethod("getAktivitaeten", new java.lang.Class[] {});
	    $method_getAvailableAccountBudget_37 = applicationServer.ApplicationServer.class.getMethod("getAvailableAccountBudget", new java.lang.Class[] {dbObjects.ZVKonto.class});
	    $method_getAvailableBudgetForAccount_38 = applicationServer.ApplicationServer.class.getMethod("getAvailableBudgetForAccount", new java.lang.Class[] {dbObjects.FBHauptkonto.class});
	    $method_getAvailableNoPurposeBudget_39 = applicationServer.ApplicationServer.class.getMethod("getAvailableNoPurposeBudget", new java.lang.Class[] {});
	    $method_getBestellungen_40 = applicationServer.ApplicationServer.class.getMethod("getBestellungen", new java.lang.Class[] {});
	    $method_getBestellungen_41 = applicationServer.ApplicationServer.class.getMethod("getBestellungen", new java.lang.Class[] {int.class});
	    $method_getCurrentHaushaltsjahrId_42 = applicationServer.ApplicationServer.class.getMethod("getCurrentHaushaltsjahrId", new java.lang.Class[] {});
	    $method_getDelKleinbestellungen_43 = applicationServer.ApplicationServer.class.getMethod("getDelKleinbestellungen", new java.lang.Class[] {});
	    $method_getFBHauptkonten_44 = applicationServer.ApplicationServer.class.getMethod("getFBHauptkonten", new java.lang.Class[] {dbObjects.Institut.class});
	    $method_getFBKontenForUser_45 = applicationServer.ApplicationServer.class.getMethod("getFBKontenForUser", new java.lang.Class[] {dbObjects.Benutzer.class});
	    $method_getFBKonto_46 = applicationServer.ApplicationServer.class.getMethod("getFBKonto", new java.lang.Class[] {int.class});
	    $method_getFBUnterkonten_47 = applicationServer.ApplicationServer.class.getMethod("getFBUnterkonten", new java.lang.Class[] {dbObjects.Institut.class, dbObjects.FBHauptkonto.class});
	    $method_getFachbereiche_48 = applicationServer.ApplicationServer.class.getMethod("getFachbereiche", new java.lang.Class[] {});
	    $method_getFirmen_49 = applicationServer.ApplicationServer.class.getMethod("getFirmen", new java.lang.Class[] {});
	    $method_getHaushaltsjahr_50 = applicationServer.ApplicationServer.class.getMethod("getHaushaltsjahr", new java.lang.Class[] {});
	    $method_getInstitutZuordnungen_51 = applicationServer.ApplicationServer.class.getMethod("getInstitutZuordnungen", new java.lang.Class[] {});
	    $method_getInstituteWithAccounts_52 = applicationServer.ApplicationServer.class.getMethod("getInstituteWithAccounts", new java.lang.Class[] {dbObjects.Institut.class, boolean.class});
	    $method_getInstitutes_53 = applicationServer.ApplicationServer.class.getMethod("getInstitutes", new java.lang.Class[] {});
	    $method_getInstitutesWithAccounts_54 = applicationServer.ApplicationServer.class.getMethod("getInstitutesWithAccounts", new java.lang.Class[] {});
	    $method_getInstitutesWithAccounts_55 = applicationServer.ApplicationServer.class.getMethod("getInstitutesWithAccounts", new java.lang.Class[] {boolean.class});
	    $method_getInstitutesWithMainAccounts_56 = applicationServer.ApplicationServer.class.getMethod("getInstitutesWithMainAccounts", new java.lang.Class[] {});
	    $method_getKleinbestellung_57 = applicationServer.ApplicationServer.class.getMethod("getKleinbestellung", new java.lang.Class[] {int.class});
	    $method_getKleinbestellungen_58 = applicationServer.ApplicationServer.class.getMethod("getKleinbestellungen", new java.lang.Class[] {});
	    $method_getKostenarten_59 = applicationServer.ApplicationServer.class.getMethod("getKostenarten", new java.lang.Class[] {});
	    $method_getLogList_60 = applicationServer.ApplicationServer.class.getMethod("getLogList", new java.lang.Class[] {java.sql.Date.class, java.sql.Date.class});
	    $method_getName_61 = applicationServer.ApplicationServer.class.getMethod("getName", new java.lang.Class[] {});
	    $method_getNoPurposeFBHauptkonten_62 = applicationServer.ApplicationServer.class.getMethod("getNoPurposeFBHauptkonten", new java.lang.Class[] {dbObjects.Institut.class});
	    $method_getNumberOfKontenzuordnungen_63 = applicationServer.ApplicationServer.class.getMethod("getNumberOfKontenzuordnungen", new java.lang.Class[] {dbObjects.ZVKonto.class});
	    $method_getOffeneBestellungen_64 = applicationServer.ApplicationServer.class.getMethod("getOffeneBestellungen", new java.lang.Class[] {int.class});
	    $method_getOffeneFBHauptkonten_65 = applicationServer.ApplicationServer.class.getMethod("getOffeneFBHauptkonten", new java.lang.Class[] {int.class});
	    $method_getOffeneZVKonten_66 = applicationServer.ApplicationServer.class.getMethod("getOffeneZVKonten", new java.lang.Class[] {int.class});
	    $method_getReport_67 = applicationServer.ApplicationServer.class.getMethod("getReport", new java.lang.Class[] {int.class, java.sql.Date.class, java.sql.Date.class});
	    $method_getRollen_68 = applicationServer.ApplicationServer.class.getMethod("getRollen", new java.lang.Class[] {});
	    $method_getRollenFull_69 = applicationServer.ApplicationServer.class.getMethod("getRollenFull", new java.lang.Class[] {});
	    $method_getStandardBestellung_70 = applicationServer.ApplicationServer.class.getMethod("getStandardBestellung", new java.lang.Class[] {int.class});
	    $method_getSwBeauftragte_71 = applicationServer.ApplicationServer.class.getMethod("getSwBeauftragte", new java.lang.Class[] {});
	    $method_getUser_72 = applicationServer.ApplicationServer.class.getMethod("getUser", new java.lang.Class[] {java.lang.String.class, java.lang.String.class});
	    $method_getUsers_73 = applicationServer.ApplicationServer.class.getMethod("getUsers", new java.lang.Class[] {});
	    $method_getUsers_74 = applicationServer.ApplicationServer.class.getMethod("getUsers", new java.lang.Class[] {dbObjects.Institut.class});
	    $method_getUsersByRole_75 = applicationServer.ApplicationServer.class.getMethod("getUsersByRole", new java.lang.Class[] {dbObjects.Institut.class, int.class});
	    $method_getZVKonten_76 = applicationServer.ApplicationServer.class.getMethod("getZVKonten", new java.lang.Class[] {});
	    $method_getZVKontenOnly_77 = applicationServer.ApplicationServer.class.getMethod("getZVKontenOnly", new java.lang.Class[] {});
	    $method_getZVTitelId_78 = applicationServer.ApplicationServer.class.getMethod("getZVTitelId", new java.lang.Class[] {dbObjects.ZVTitel.class});
	    $method_login_79 = applicationServer.ApplicationServer.class.getMethod("login", new java.lang.Class[] {java.lang.String.class, java.lang.String.class});
	    $method_logout_80 = applicationServer.ApplicationServer.class.getMethod("logout", new java.lang.Class[] {});
	    $method_portZVKonten_81 = applicationServer.ApplicationServer.class.getMethod("portZVKonten", new java.lang.Class[] {java.util.ArrayList.class, int.class, int.class});
	    $method_setAccountBudget_82 = applicationServer.ApplicationServer.class.getMethod("setAccountBudget", new java.lang.Class[] {dbObjects.Benutzer.class, dbObjects.FBHauptkonto.class, float.class});
	    $method_setBestellung_83 = applicationServer.ApplicationServer.class.getMethod("setBestellung", new java.lang.Class[] {dbObjects.Benutzer.class, dbObjects.ASKBestellung.class, dbObjects.ASKBestellung.class});
	    $method_setBestellung_84 = applicationServer.ApplicationServer.class.getMethod("setBestellung", new java.lang.Class[] {dbObjects.Benutzer.class, dbObjects.StandardBestellung.class, dbObjects.StandardBestellung.class});
	    $method_setFBHauptkonto_85 = applicationServer.ApplicationServer.class.getMethod("setFBHauptkonto", new java.lang.Class[] {dbObjects.FBHauptkonto.class});
	    $method_setFBUnterkonto_86 = applicationServer.ApplicationServer.class.getMethod("setFBUnterkonto", new java.lang.Class[] {dbObjects.FBUnterkonto.class});
	    $method_setFachbereich_87 = applicationServer.ApplicationServer.class.getMethod("setFachbereich", new java.lang.Class[] {dbObjects.Fachbereich.class, dbObjects.Fachbereich.class});
	    $method_setFirma_88 = applicationServer.ApplicationServer.class.getMethod("setFirma", new java.lang.Class[] {dbObjects.Firma.class});
	    $method_setHaushaltsjahr_89 = applicationServer.ApplicationServer.class.getMethod("setHaushaltsjahr", new java.lang.Class[] {dbObjects.Haushaltsjahr.class, dbObjects.Haushaltsjahr.class});
	    $method_setInstitute_90 = applicationServer.ApplicationServer.class.getMethod("setInstitute", new java.lang.Class[] {dbObjects.Institut.class, dbObjects.Institut.class});
	    $method_setKontenZuordnung_91 = applicationServer.ApplicationServer.class.getMethod("setKontenZuordnung", new java.lang.Class[] {dbObjects.FBHauptkonto.class, dbObjects.Kontenzuordnung.class});
	    $method_setRolle_92 = applicationServer.ApplicationServer.class.getMethod("setRolle", new java.lang.Class[] {dbObjects.Rolle.class, dbObjects.Rolle.class});
	    $method_setUser_93 = applicationServer.ApplicationServer.class.getMethod("setUser", new java.lang.Class[] {dbObjects.Benutzer.class, dbObjects.Benutzer.class});
	    $method_setZVKonto_94 = applicationServer.ApplicationServer.class.getMethod("setZVKonto", new java.lang.Class[] {dbObjects.ZVKonto.class});
	    $method_setZVTitel_95 = applicationServer.ApplicationServer.class.getMethod("setZVTitel", new java.lang.Class[] {dbObjects.ZVTitel.class});
	    $method_setZVUntertitel_96 = applicationServer.ApplicationServer.class.getMethod("setZVUntertitel", new java.lang.Class[] {dbObjects.ZVUntertitel.class});
	} catch (java.lang.NoSuchMethodException e) {
	    throw new java.lang.NoSuchMethodError(
		"stub class initialization failed");
	}
    }
    
    // constructors
    public ApplicationServerImpl_Stub(java.rmi.server.RemoteRef ref) {
	super(ref);
    }
    
    // methods from remote interfaces
    
    // implementation of addBestellung(ASKBestellung)
    public int addBestellung(dbObjects.ASKBestellung $param_ASKBestellung_1)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_addBestellung_0, new java.lang.Object[] {$param_ASKBestellung_1}, 2018629904499889930L);
	    return ((java.lang.Integer) $result).intValue();
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of addBestellung(StandardBestellung)
    public int addBestellung(dbObjects.StandardBestellung $param_StandardBestellung_1)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_addBestellung_1, new java.lang.Object[] {$param_StandardBestellung_1}, -7141568394395948604L);
	    return ((java.lang.Integer) $result).intValue();
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of addFBHauptkonto(FBHauptkonto)
    public int addFBHauptkonto(dbObjects.FBHauptkonto $param_FBHauptkonto_1)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_addFBHauptkonto_2, new java.lang.Object[] {$param_FBHauptkonto_1}, 6525168342380062248L);
	    return ((java.lang.Integer) $result).intValue();
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of addFBUnterkonto(FBUnterkonto)
    public int addFBUnterkonto(dbObjects.FBUnterkonto $param_FBUnterkonto_1)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_addFBUnterkonto_3, new java.lang.Object[] {$param_FBUnterkonto_1}, 3107194606724584897L);
	    return ((java.lang.Integer) $result).intValue();
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of addFirma(Firma)
    public int addFirma(dbObjects.Firma $param_Firma_1)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_addFirma_4, new java.lang.Object[] {$param_Firma_1}, -9194144346870270739L);
	    return ((java.lang.Integer) $result).intValue();
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of addInstitute(Institut)
    public int addInstitute(dbObjects.Institut $param_Institut_1)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_addInstitute_5, new java.lang.Object[] {$param_Institut_1}, -3583970179989161010L);
	    return ((java.lang.Integer) $result).intValue();
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of addKleinbestellung(KleinBestellung)
    public int addKleinbestellung(dbObjects.KleinBestellung $param_KleinBestellung_1)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_addKleinbestellung_6, new java.lang.Object[] {$param_KleinBestellung_1}, -2730739743943565755L);
	    return ((java.lang.Integer) $result).intValue();
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of addKontenZuordnung(FBHauptkonto, ZVKonto)
    public void addKontenZuordnung(dbObjects.FBHauptkonto $param_FBHauptkonto_1, dbObjects.ZVKonto $param_ZVKonto_2)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_addKontenZuordnung_7, new java.lang.Object[] {$param_FBHauptkonto_1, $param_ZVKonto_2}, -4177659853049081167L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of addRolle(Rolle)
    public int addRolle(dbObjects.Rolle $param_Rolle_1)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_addRolle_8, new java.lang.Object[] {$param_Rolle_1}, 2142102777982794155L);
	    return ((java.lang.Integer) $result).intValue();
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of addRollenAktivitaet(int, int)
    public void addRollenAktivitaet(int $param_int_1, int $param_int_2)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_addRollenAktivitaet_9, new java.lang.Object[] {new java.lang.Integer($param_int_1), new java.lang.Integer($param_int_2)}, -4004067517523928360L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of addUser(Benutzer)
    public int addUser(dbObjects.Benutzer $param_Benutzer_1)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_addUser_10, new java.lang.Object[] {$param_Benutzer_1}, -5437726647760334324L);
	    return ((java.lang.Integer) $result).intValue();
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of addZVKonto(ZVKonto)
    public int addZVKonto(dbObjects.ZVKonto $param_ZVKonto_1)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_addZVKonto_11, new java.lang.Object[] {$param_ZVKonto_1}, 9027554005221021214L);
	    return ((java.lang.Integer) $result).intValue();
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of addZVTitel(ZVTitel)
    public int addZVTitel(dbObjects.ZVTitel $param_ZVTitel_1)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_addZVTitel_12, new java.lang.Object[] {$param_ZVTitel_1}, 290566595758402942L);
	    return ((java.lang.Integer) $result).intValue();
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of addZVUntertitel(ZVUntertitel)
    public int addZVUntertitel(dbObjects.ZVUntertitel $param_ZVUntertitel_1)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_addZVUntertitel_13, new java.lang.Object[] {$param_ZVUntertitel_1}, -1317476784262082836L);
	    return ((java.lang.Integer) $result).intValue();
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of buche(Benutzer, FBHauptkonto, FBHauptkonto, float)
    public void buche(dbObjects.Benutzer $param_Benutzer_1, dbObjects.FBHauptkonto $param_FBHauptkonto_2, dbObjects.FBHauptkonto $param_FBHauptkonto_3, float $param_float_4)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_buche_14, new java.lang.Object[] {$param_Benutzer_1, $param_FBHauptkonto_2, $param_FBHauptkonto_3, new java.lang.Float($param_float_4)}, -1264608219386161848L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of buche(Benutzer, FBHauptkonto, FBUnterkonto, float)
    public void buche(dbObjects.Benutzer $param_Benutzer_1, dbObjects.FBHauptkonto $param_FBHauptkonto_2, dbObjects.FBUnterkonto $param_FBUnterkonto_3, float $param_float_4)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_buche_15, new java.lang.Object[] {$param_Benutzer_1, $param_FBHauptkonto_2, $param_FBUnterkonto_3, new java.lang.Float($param_float_4)}, -299535951608757931L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of buche(Benutzer, FBUnterkonto, FBHauptkonto, float)
    public void buche(dbObjects.Benutzer $param_Benutzer_1, dbObjects.FBUnterkonto $param_FBUnterkonto_2, dbObjects.FBHauptkonto $param_FBHauptkonto_3, float $param_float_4)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_buche_16, new java.lang.Object[] {$param_Benutzer_1, $param_FBUnterkonto_2, $param_FBHauptkonto_3, new java.lang.Float($param_float_4)}, 3021457282171243963L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of buche(Benutzer, ZVKonto, float)
    public void buche(dbObjects.Benutzer $param_Benutzer_1, dbObjects.ZVKonto $param_ZVKonto_2, float $param_float_3)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_buche_17, new java.lang.Object[] {$param_Benutzer_1, $param_ZVKonto_2, new java.lang.Float($param_float_3)}, 7890448751278505492L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of buche(Benutzer, ZVTitel, float)
    public void buche(dbObjects.Benutzer $param_Benutzer_1, dbObjects.ZVTitel $param_ZVTitel_2, float $param_float_3)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_buche_18, new java.lang.Object[] {$param_Benutzer_1, $param_ZVTitel_2, new java.lang.Float($param_float_3)}, 5229023204047133144L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of buche(Benutzer, ZVUntertitel, float)
    public void buche(dbObjects.Benutzer $param_Benutzer_1, dbObjects.ZVUntertitel $param_ZVUntertitel_2, float $param_float_3)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_buche_19, new java.lang.Object[] {$param_Benutzer_1, $param_ZVUntertitel_2, new java.lang.Float($param_float_3)}, -1195434699394514895L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of delBestellung(ASKBestellung)
    public void delBestellung(dbObjects.ASKBestellung $param_ASKBestellung_1)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_delBestellung_20, new java.lang.Object[] {$param_ASKBestellung_1}, -8166407972316158362L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of delBestellung(StandardBestellung)
    public void delBestellung(dbObjects.StandardBestellung $param_StandardBestellung_1)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_delBestellung_21, new java.lang.Object[] {$param_StandardBestellung_1}, -6664325241200787024L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of delFBHauptkonto(FBHauptkonto)
    public int delFBHauptkonto(dbObjects.FBHauptkonto $param_FBHauptkonto_1)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_delFBHauptkonto_22, new java.lang.Object[] {$param_FBHauptkonto_1}, 7225732700979535805L);
	    return ((java.lang.Integer) $result).intValue();
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of delFBUnterkonto(FBUnterkonto)
    public int delFBUnterkonto(dbObjects.FBUnterkonto $param_FBUnterkonto_1)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_delFBUnterkonto_23, new java.lang.Object[] {$param_FBUnterkonto_1}, 7769233202323775240L);
	    return ((java.lang.Integer) $result).intValue();
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of delFirma(Firma)
    public int delFirma(dbObjects.Firma $param_Firma_1)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_delFirma_24, new java.lang.Object[] {$param_Firma_1}, 7067258562379867425L);
	    return ((java.lang.Integer) $result).intValue();
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of delInstitute(Institut)
    public void delInstitute(dbObjects.Institut $param_Institut_1)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_delInstitute_25, new java.lang.Object[] {$param_Institut_1}, 5084473296544705979L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of delKleinbestellung(KleinBestellung)
    public int delKleinbestellung(dbObjects.KleinBestellung $param_KleinBestellung_1)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_delKleinbestellung_26, new java.lang.Object[] {$param_KleinBestellung_1}, 8846856844621797200L);
	    return ((java.lang.Integer) $result).intValue();
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of delKontenZuordnung(FBHauptkonto, ZVKonto)
    public void delKontenZuordnung(dbObjects.FBHauptkonto $param_FBHauptkonto_1, dbObjects.ZVKonto $param_ZVKonto_2)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_delKontenZuordnung_27, new java.lang.Object[] {$param_FBHauptkonto_1, $param_ZVKonto_2}, -5224759650805893156L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of delRolle(Rolle)
    public void delRolle(dbObjects.Rolle $param_Rolle_1)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_delRolle_28, new java.lang.Object[] {$param_Rolle_1}, -1680860033238369119L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of delRollenAktivitaet(int, int)
    public void delRollenAktivitaet(int $param_int_1, int $param_int_2)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_delRollenAktivitaet_29, new java.lang.Object[] {new java.lang.Integer($param_int_1), new java.lang.Integer($param_int_2)}, -2883170820284310930L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of delUser(Benutzer)
    public void delUser(dbObjects.Benutzer $param_Benutzer_1)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_delUser_30, new java.lang.Object[] {$param_Benutzer_1}, -737084551344207759L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of delZVKonto(ZVKonto)
    public int delZVKonto(dbObjects.ZVKonto $param_ZVKonto_1)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_delZVKonto_31, new java.lang.Object[] {$param_ZVKonto_1}, 5255023716445036258L);
	    return ((java.lang.Integer) $result).intValue();
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of delZVTitel(ZVTitel)
    public int delZVTitel(dbObjects.ZVTitel $param_ZVTitel_1)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_delZVTitel_32, new java.lang.Object[] {$param_ZVTitel_1}, 4724966441718242675L);
	    return ((java.lang.Integer) $result).intValue();
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of delZVUntertitel(ZVUntertitel)
    public int delZVUntertitel(dbObjects.ZVUntertitel $param_ZVUntertitel_1)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_delZVUntertitel_33, new java.lang.Object[] {$param_ZVUntertitel_1}, 3491329513710688421L);
	    return ((java.lang.Integer) $result).intValue();
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getASKBestellung(int)
    public dbObjects.ASKBestellung getASKBestellung(int $param_int_1)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getASKBestellung_34, new java.lang.Object[] {new java.lang.Integer($param_int_1)}, 226447144831845721L);
	    return ((dbObjects.ASKBestellung) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getASKFirma()
    public dbObjects.Firma getASKFirma()
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getASKFirma_35, null, -4369024237780905153L);
	    return ((dbObjects.Firma) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getAktivitaeten()
    public dbObjects.Aktivitaet[] getAktivitaeten()
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getAktivitaeten_36, null, -5389849291352052074L);
	    return ((dbObjects.Aktivitaet[]) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getAvailableAccountBudget(ZVKonto)
    public float getAvailableAccountBudget(dbObjects.ZVKonto $param_ZVKonto_1)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getAvailableAccountBudget_37, new java.lang.Object[] {$param_ZVKonto_1}, 5971802576090395266L);
	    return ((java.lang.Float) $result).floatValue();
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getAvailableBudgetForAccount(FBHauptkonto)
    public float getAvailableBudgetForAccount(dbObjects.FBHauptkonto $param_FBHauptkonto_1)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getAvailableBudgetForAccount_38, new java.lang.Object[] {$param_FBHauptkonto_1}, 7284200744115060332L);
	    return ((java.lang.Float) $result).floatValue();
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getAvailableNoPurposeBudget()
    public float getAvailableNoPurposeBudget()
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getAvailableNoPurposeBudget_39, null, -4666816342355502050L);
	    return ((java.lang.Float) $result).floatValue();
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getBestellungen()
    public java.util.ArrayList getBestellungen()
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getBestellungen_40, null, -2274442703760382529L);
	    return ((java.util.ArrayList) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getBestellungen(int)
    public java.util.ArrayList getBestellungen(int $param_int_1)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getBestellungen_41, new java.lang.Object[] {new java.lang.Integer($param_int_1)}, -567811436276697477L);
	    return ((java.util.ArrayList) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getCurrentHaushaltsjahrId()
    public int getCurrentHaushaltsjahrId()
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getCurrentHaushaltsjahrId_42, null, -1018351192106895100L);
	    return ((java.lang.Integer) $result).intValue();
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getDelKleinbestellungen()
    public java.util.ArrayList getDelKleinbestellungen()
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getDelKleinbestellungen_43, null, 4511290000968961498L);
	    return ((java.util.ArrayList) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getFBHauptkonten(Institut)
    public java.util.ArrayList getFBHauptkonten(dbObjects.Institut $param_Institut_1)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getFBHauptkonten_44, new java.lang.Object[] {$param_Institut_1}, 3577407778760608627L);
	    return ((java.util.ArrayList) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getFBKontenForUser(Benutzer)
    public dbObjects.Institut[] getFBKontenForUser(dbObjects.Benutzer $param_Benutzer_1)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getFBKontenForUser_45, new java.lang.Object[] {$param_Benutzer_1}, 4260191179896787742L);
	    return ((dbObjects.Institut[]) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getFBKonto(int)
    public dbObjects.FBUnterkonto getFBKonto(int $param_int_1)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getFBKonto_46, new java.lang.Object[] {new java.lang.Integer($param_int_1)}, -7139528806290552764L);
	    return ((dbObjects.FBUnterkonto) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getFBUnterkonten(Institut, FBHauptkonto)
    public java.util.ArrayList getFBUnterkonten(dbObjects.Institut $param_Institut_1, dbObjects.FBHauptkonto $param_FBHauptkonto_2)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getFBUnterkonten_47, new java.lang.Object[] {$param_Institut_1, $param_FBHauptkonto_2}, -373722492910229279L);
	    return ((java.util.ArrayList) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getFachbereiche()
    public dbObjects.Fachbereich[] getFachbereiche()
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getFachbereiche_48, null, 5766964865087045017L);
	    return ((dbObjects.Fachbereich[]) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getFirmen()
    public java.util.ArrayList getFirmen()
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getFirmen_49, null, -4912317495160858508L);
	    return ((java.util.ArrayList) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getHaushaltsjahr()
    public dbObjects.Haushaltsjahr getHaushaltsjahr()
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getHaushaltsjahr_50, null, 9061721627610323575L);
	    return ((dbObjects.Haushaltsjahr) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getInstitutZuordnungen()
    public dbObjects.Institut[] getInstitutZuordnungen()
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getInstitutZuordnungen_51, null, -8773041853394568451L);
	    return ((dbObjects.Institut[]) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getInstituteWithAccounts(Institut, boolean)
    public dbObjects.Institut[] getInstituteWithAccounts(dbObjects.Institut $param_Institut_1, boolean $param_boolean_2)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getInstituteWithAccounts_52, new java.lang.Object[] {$param_Institut_1, new java.lang.Boolean($param_boolean_2)}, -4550449708954868445L);
	    return ((dbObjects.Institut[]) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getInstitutes()
    public dbObjects.Institut[] getInstitutes()
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getInstitutes_53, null, -5374520558832890038L);
	    return ((dbObjects.Institut[]) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getInstitutesWithAccounts()
    public dbObjects.Institut[] getInstitutesWithAccounts()
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getInstitutesWithAccounts_54, null, 4659665908752595404L);
	    return ((dbObjects.Institut[]) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getInstitutesWithAccounts(boolean)
    public dbObjects.Institut[] getInstitutesWithAccounts(boolean $param_boolean_1)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getInstitutesWithAccounts_55, new java.lang.Object[] {new java.lang.Boolean($param_boolean_1)}, 3314966849312047775L);
	    return ((dbObjects.Institut[]) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getInstitutesWithMainAccounts()
    public dbObjects.Institut[] getInstitutesWithMainAccounts()
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getInstitutesWithMainAccounts_56, null, 8648467791866684925L);
	    return ((dbObjects.Institut[]) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getKleinbestellung(int)
    public dbObjects.KleinBestellung getKleinbestellung(int $param_int_1)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getKleinbestellung_57, new java.lang.Object[] {new java.lang.Integer($param_int_1)}, -5122035516259108431L);
	    return ((dbObjects.KleinBestellung) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getKleinbestellungen()
    public java.util.ArrayList getKleinbestellungen()
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getKleinbestellungen_58, null, 8344725021367795183L);
	    return ((java.util.ArrayList) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getKostenarten()
    public dbObjects.Kostenart[] getKostenarten()
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getKostenarten_59, null, -6867682227654063130L);
	    return ((dbObjects.Kostenart[]) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getLogList(Date, Date)
    public java.util.ArrayList getLogList(java.sql.Date $param_Date_1, java.sql.Date $param_Date_2)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getLogList_60, new java.lang.Object[] {$param_Date_1, $param_Date_2}, 27058466326926922L);
	    return ((java.util.ArrayList) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getName()
    public java.lang.String getName()
	throws java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getName_61, null, 6317137956467216454L);
	    return ((java.lang.String) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getNoPurposeFBHauptkonten(Institut)
    public java.util.ArrayList getNoPurposeFBHauptkonten(dbObjects.Institut $param_Institut_1)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getNoPurposeFBHauptkonten_62, new java.lang.Object[] {$param_Institut_1}, 2506649164800270070L);
	    return ((java.util.ArrayList) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getNumberOfKontenzuordnungen(ZVKonto)
    public int getNumberOfKontenzuordnungen(dbObjects.ZVKonto $param_ZVKonto_1)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getNumberOfKontenzuordnungen_63, new java.lang.Object[] {$param_ZVKonto_1}, 1165981581191234994L);
	    return ((java.lang.Integer) $result).intValue();
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getOffeneBestellungen(int)
    public java.util.ArrayList getOffeneBestellungen(int $param_int_1)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getOffeneBestellungen_64, new java.lang.Object[] {new java.lang.Integer($param_int_1)}, -2280419437512116308L);
	    return ((java.util.ArrayList) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getOffeneFBHauptkonten(int)
    public java.util.ArrayList getOffeneFBHauptkonten(int $param_int_1)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getOffeneFBHauptkonten_65, new java.lang.Object[] {new java.lang.Integer($param_int_1)}, 8120726347109308446L);
	    return ((java.util.ArrayList) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getOffeneZVKonten(int)
    public java.util.ArrayList getOffeneZVKonten(int $param_int_1)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getOffeneZVKonten_66, new java.lang.Object[] {new java.lang.Integer($param_int_1)}, -5594928347851691886L);
	    return ((java.util.ArrayList) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getReport(int, Date, Date)
    public java.util.ArrayList getReport(int $param_int_1, java.sql.Date $param_Date_2, java.sql.Date $param_Date_3)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getReport_67, new java.lang.Object[] {new java.lang.Integer($param_int_1), $param_Date_2, $param_Date_3}, 1279390578186283083L);
	    return ((java.util.ArrayList) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getRollen()
    public dbObjects.Rolle[] getRollen()
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getRollen_68, null, 8060504328917123995L);
	    return ((dbObjects.Rolle[]) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getRollenFull()
    public dbObjects.Rolle[] getRollenFull()
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getRollenFull_69, null, 4830644982727885940L);
	    return ((dbObjects.Rolle[]) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getStandardBestellung(int)
    public dbObjects.StandardBestellung getStandardBestellung(int $param_int_1)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getStandardBestellung_70, new java.lang.Object[] {new java.lang.Integer($param_int_1)}, -9163243513425107859L);
	    return ((dbObjects.StandardBestellung) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getSwBeauftragte()
    public dbObjects.Benutzer[] getSwBeauftragte()
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getSwBeauftragte_71, null, -3479095673481886193L);
	    return ((dbObjects.Benutzer[]) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getUser(String, String)
    public dbObjects.Benutzer getUser(java.lang.String $param_String_1, java.lang.String $param_String_2)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getUser_72, new java.lang.Object[] {$param_String_1, $param_String_2}, -31298424909577749L);
	    return ((dbObjects.Benutzer) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getUsers()
    public dbObjects.Benutzer[] getUsers()
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getUsers_73, null, -93502309665610735L);
	    return ((dbObjects.Benutzer[]) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getUsers(Institut)
    public dbObjects.Benutzer[] getUsers(dbObjects.Institut $param_Institut_1)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getUsers_74, new java.lang.Object[] {$param_Institut_1}, 6902480040832794116L);
	    return ((dbObjects.Benutzer[]) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getUsersByRole(Institut, int)
    public dbObjects.Benutzer[] getUsersByRole(dbObjects.Institut $param_Institut_1, int $param_int_2)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getUsersByRole_75, new java.lang.Object[] {$param_Institut_1, new java.lang.Integer($param_int_2)}, 4638727419777682472L);
	    return ((dbObjects.Benutzer[]) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getZVKonten()
    public java.util.ArrayList getZVKonten()
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getZVKonten_76, null, 2386231262600236351L);
	    return ((java.util.ArrayList) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getZVKontenOnly()
    public java.util.ArrayList getZVKontenOnly()
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getZVKontenOnly_77, null, -1505493009211920427L);
	    return ((java.util.ArrayList) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of getZVTitelId(ZVTitel)
    public int getZVTitelId(dbObjects.ZVTitel $param_ZVTitel_1)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_getZVTitelId_78, new java.lang.Object[] {$param_ZVTitel_1}, 2638308445376525461L);
	    return ((java.lang.Integer) $result).intValue();
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of login(String, String)
    public dbObjects.Benutzer login(java.lang.String $param_String_1, java.lang.String $param_String_2)
	throws applicationServer.ApplicationServerException, applicationServer.ConnectionException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_login_79, new java.lang.Object[] {$param_String_1, $param_String_2}, 7933794942774794688L);
	    return ((dbObjects.Benutzer) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (applicationServer.ConnectionException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of logout()
    public void logout()
	throws applicationServer.ConnectionException, java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_logout_80, null, -2314256391406573046L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ConnectionException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of portZVKonten(ArrayList, int, int)
    public void portZVKonten(java.util.ArrayList $param_ArrayList_1, int $param_int_2, int $param_int_3)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_portZVKonten_81, new java.lang.Object[] {$param_ArrayList_1, new java.lang.Integer($param_int_2), new java.lang.Integer($param_int_3)}, 7940601304498133760L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of setAccountBudget(Benutzer, FBHauptkonto, float)
    public void setAccountBudget(dbObjects.Benutzer $param_Benutzer_1, dbObjects.FBHauptkonto $param_FBHauptkonto_2, float $param_float_3)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_setAccountBudget_82, new java.lang.Object[] {$param_Benutzer_1, $param_FBHauptkonto_2, new java.lang.Float($param_float_3)}, 501138883092039617L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of setBestellung(Benutzer, ASKBestellung, ASKBestellung)
    public void setBestellung(dbObjects.Benutzer $param_Benutzer_1, dbObjects.ASKBestellung $param_ASKBestellung_2, dbObjects.ASKBestellung $param_ASKBestellung_3)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_setBestellung_83, new java.lang.Object[] {$param_Benutzer_1, $param_ASKBestellung_2, $param_ASKBestellung_3}, 4176581119368034890L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of setBestellung(Benutzer, StandardBestellung, StandardBestellung)
    public void setBestellung(dbObjects.Benutzer $param_Benutzer_1, dbObjects.StandardBestellung $param_StandardBestellung_2, dbObjects.StandardBestellung $param_StandardBestellung_3)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_setBestellung_84, new java.lang.Object[] {$param_Benutzer_1, $param_StandardBestellung_2, $param_StandardBestellung_3}, 4173076474818309947L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of setFBHauptkonto(FBHauptkonto)
    public int setFBHauptkonto(dbObjects.FBHauptkonto $param_FBHauptkonto_1)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_setFBHauptkonto_85, new java.lang.Object[] {$param_FBHauptkonto_1}, -3098460641072066493L);
	    return ((java.lang.Integer) $result).intValue();
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of setFBUnterkonto(FBUnterkonto)
    public int setFBUnterkonto(dbObjects.FBUnterkonto $param_FBUnterkonto_1)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_setFBUnterkonto_86, new java.lang.Object[] {$param_FBUnterkonto_1}, -3215881295573068950L);
	    return ((java.lang.Integer) $result).intValue();
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of setFachbereich(Fachbereich, Fachbereich)
    public dbObjects.Fachbereich setFachbereich(dbObjects.Fachbereich $param_Fachbereich_1, dbObjects.Fachbereich $param_Fachbereich_2)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_setFachbereich_87, new java.lang.Object[] {$param_Fachbereich_1, $param_Fachbereich_2}, 1778860291130592532L);
	    return ((dbObjects.Fachbereich) $result);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of setFirma(Firma)
    public int setFirma(dbObjects.Firma $param_Firma_1)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_setFirma_88, new java.lang.Object[] {$param_Firma_1}, 242269189777358345L);
	    return ((java.lang.Integer) $result).intValue();
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of setHaushaltsjahr(Haushaltsjahr, Haushaltsjahr)
    public void setHaushaltsjahr(dbObjects.Haushaltsjahr $param_Haushaltsjahr_1, dbObjects.Haushaltsjahr $param_Haushaltsjahr_2)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_setHaushaltsjahr_89, new java.lang.Object[] {$param_Haushaltsjahr_1, $param_Haushaltsjahr_2}, -3397053694205119836L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of setInstitute(Institut, Institut)
    public void setInstitute(dbObjects.Institut $param_Institut_1, dbObjects.Institut $param_Institut_2)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_setInstitute_90, new java.lang.Object[] {$param_Institut_1, $param_Institut_2}, 920348241328705944L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of setKontenZuordnung(FBHauptkonto, Kontenzuordnung)
    public void setKontenZuordnung(dbObjects.FBHauptkonto $param_FBHauptkonto_1, dbObjects.Kontenzuordnung $param_Kontenzuordnung_2)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_setKontenZuordnung_91, new java.lang.Object[] {$param_FBHauptkonto_1, $param_Kontenzuordnung_2}, 552054922101026979L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of setRolle(Rolle, Rolle)
    public void setRolle(dbObjects.Rolle $param_Rolle_1, dbObjects.Rolle $param_Rolle_2)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_setRolle_92, new java.lang.Object[] {$param_Rolle_1, $param_Rolle_2}, -3231724069748232909L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of setUser(Benutzer, Benutzer)
    public void setUser(dbObjects.Benutzer $param_Benutzer_1, dbObjects.Benutzer $param_Benutzer_2)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_setUser_93, new java.lang.Object[] {$param_Benutzer_1, $param_Benutzer_2}, 6349123237153146290L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of setZVKonto(ZVKonto)
    public int setZVKonto(dbObjects.ZVKonto $param_ZVKonto_1)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_setZVKonto_94, new java.lang.Object[] {$param_ZVKonto_1}, -908673309052549770L);
	    return ((java.lang.Integer) $result).intValue();
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of setZVTitel(ZVTitel)
    public int setZVTitel(dbObjects.ZVTitel $param_ZVTitel_1)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_setZVTitel_95, new java.lang.Object[] {$param_ZVTitel_1}, 2760431180400196529L);
	    return ((java.lang.Integer) $result).intValue();
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of setZVUntertitel(ZVUntertitel)
    public int setZVUntertitel(dbObjects.ZVUntertitel $param_ZVUntertitel_1)
	throws applicationServer.ApplicationServerException, java.rmi.RemoteException
    {
	try {
	    Object $result = ref.invoke(this, $method_setZVUntertitel_96, new java.lang.Object[] {$param_ZVUntertitel_1}, -1823691546304551198L);
	    return ((java.lang.Integer) $result).intValue();
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (applicationServer.ApplicationServerException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
}
