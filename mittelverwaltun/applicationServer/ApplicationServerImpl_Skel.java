// Skeleton class generated by rmic, do not edit.
// Contents subject to change without notice.

package applicationServer;

public final class ApplicationServerImpl_Skel
    implements java.rmi.server.Skeleton
{
    private static final java.rmi.server.Operation[] operations = {
	new java.rmi.server.Operation("int addBestellung(dbObjects.ASKBestellung)"),
	new java.rmi.server.Operation("int addBestellung(dbObjects.StandardBestellung)"),
	new java.rmi.server.Operation("int addFBHauptkonto(dbObjects.FBHauptkonto)"),
	new java.rmi.server.Operation("int addFBUnterkonto(dbObjects.FBUnterkonto)"),
	new java.rmi.server.Operation("int addFirma(dbObjects.Firma)"),
	new java.rmi.server.Operation("int addInstitute(dbObjects.Institut)"),
	new java.rmi.server.Operation("int addKleinbestellung(dbObjects.KleinBestellung)"),
	new java.rmi.server.Operation("void addKontenZuordnung(dbObjects.FBHauptkonto, dbObjects.ZVKonto)"),
	new java.rmi.server.Operation("int addRolle(dbObjects.Rolle)"),
	new java.rmi.server.Operation("void addRollenAktivitaet(int, int)"),
	new java.rmi.server.Operation("int addUser(dbObjects.Benutzer)"),
	new java.rmi.server.Operation("int addZVKonto(dbObjects.ZVKonto)"),
	new java.rmi.server.Operation("int addZVTitel(dbObjects.ZVTitel)"),
	new java.rmi.server.Operation("int addZVUntertitel(dbObjects.ZVUntertitel)"),
	new java.rmi.server.Operation("void buche(dbObjects.Benutzer, dbObjects.FBHauptkonto, dbObjects.FBHauptkonto, float)"),
	new java.rmi.server.Operation("void buche(dbObjects.Benutzer, dbObjects.FBHauptkonto, dbObjects.FBUnterkonto, float)"),
	new java.rmi.server.Operation("void buche(dbObjects.Benutzer, dbObjects.FBUnterkonto, dbObjects.FBHauptkonto, float)"),
	new java.rmi.server.Operation("void buche(dbObjects.Benutzer, dbObjects.ZVKonto, float)"),
	new java.rmi.server.Operation("void buche(dbObjects.Benutzer, dbObjects.ZVTitel, float)"),
	new java.rmi.server.Operation("void buche(dbObjects.Benutzer, dbObjects.ZVUntertitel, float)"),
	new java.rmi.server.Operation("void delBestellung(dbObjects.ASKBestellung)"),
	new java.rmi.server.Operation("void delBestellung(dbObjects.StandardBestellung)"),
	new java.rmi.server.Operation("int delFBHauptkonto(dbObjects.FBHauptkonto)"),
	new java.rmi.server.Operation("int delFBUnterkonto(dbObjects.FBUnterkonto)"),
	new java.rmi.server.Operation("int delFirma(dbObjects.Firma)"),
	new java.rmi.server.Operation("void delInstitute(dbObjects.Institut)"),
	new java.rmi.server.Operation("int delKleinbestellung(dbObjects.KleinBestellung)"),
	new java.rmi.server.Operation("void delKontenZuordnung(dbObjects.FBHauptkonto, dbObjects.ZVKonto)"),
	new java.rmi.server.Operation("void delRolle(dbObjects.Rolle)"),
	new java.rmi.server.Operation("void delRollenAktivitaet(int, int)"),
	new java.rmi.server.Operation("void delUser(dbObjects.Benutzer)"),
	new java.rmi.server.Operation("int delZVKonto(dbObjects.ZVKonto)"),
	new java.rmi.server.Operation("int delZVTitel(dbObjects.ZVTitel)"),
	new java.rmi.server.Operation("int delZVUntertitel(dbObjects.ZVUntertitel)"),
	new java.rmi.server.Operation("dbObjects.ASKBestellung getASKBestellung(int)"),
	new java.rmi.server.Operation("dbObjects.Firma getASKFirma()"),
	new java.rmi.server.Operation("dbObjects.Aktivitaet getAktivitaeten()[]"),
	new java.rmi.server.Operation("float getAvailableAccountBudget(dbObjects.ZVKonto)"),
	new java.rmi.server.Operation("float getAvailableBudgetForAccount(dbObjects.FBHauptkonto)"),
	new java.rmi.server.Operation("float getAvailableNoPurposeBudget()"),
	new java.rmi.server.Operation("java.util.ArrayList getBestellungen()"),
	new java.rmi.server.Operation("java.util.ArrayList getBestellungen(int)"),
	new java.rmi.server.Operation("int getCurrentHaushaltsjahrId()"),
	new java.rmi.server.Operation("java.util.ArrayList getDelKleinbestellungen()"),
	new java.rmi.server.Operation("java.util.ArrayList getFBHauptkonten(dbObjects.Institut)"),
	new java.rmi.server.Operation("dbObjects.Institut getFBKontenForUser(dbObjects.Benutzer)[]"),
	new java.rmi.server.Operation("dbObjects.FBUnterkonto getFBKonto(int)"),
	new java.rmi.server.Operation("java.util.ArrayList getFBUnterkonten(dbObjects.Institut, dbObjects.FBHauptkonto)"),
	new java.rmi.server.Operation("dbObjects.Fachbereich getFachbereiche()[]"),
	new java.rmi.server.Operation("java.util.ArrayList getFirmen()"),
	new java.rmi.server.Operation("dbObjects.Haushaltsjahr getHaushaltsjahr()"),
	new java.rmi.server.Operation("dbObjects.Institut getInstitutZuordnungen()[]"),
	new java.rmi.server.Operation("dbObjects.Institut getInstituteWithAccounts(dbObjects.Institut, boolean)[]"),
	new java.rmi.server.Operation("dbObjects.Institut getInstitutes()[]"),
	new java.rmi.server.Operation("dbObjects.Institut getInstitutesWithAccounts()[]"),
	new java.rmi.server.Operation("dbObjects.Institut getInstitutesWithAccounts(boolean)[]"),
	new java.rmi.server.Operation("dbObjects.Institut getInstitutesWithMainAccounts()[]"),
	new java.rmi.server.Operation("dbObjects.KleinBestellung getKleinbestellung(int)"),
	new java.rmi.server.Operation("java.util.ArrayList getKleinbestellungen()"),
	new java.rmi.server.Operation("dbObjects.Kostenart getKostenarten()[]"),
	new java.rmi.server.Operation("java.util.ArrayList getLogList(java.sql.Date, java.sql.Date)"),
	new java.rmi.server.Operation("java.lang.String getName()"),
	new java.rmi.server.Operation("java.util.ArrayList getNoPurposeFBHauptkonten(dbObjects.Institut)"),
	new java.rmi.server.Operation("int getNumberOfKontenzuordnungen(dbObjects.ZVKonto)"),
	new java.rmi.server.Operation("java.util.ArrayList getOffeneZVKonten(int)"),
	new java.rmi.server.Operation("java.util.ArrayList getReport(int, java.sql.Date, java.sql.Date)"),
	new java.rmi.server.Operation("dbObjects.Rolle getRollen()[]"),
	new java.rmi.server.Operation("dbObjects.Rolle getRollenFull()[]"),
	new java.rmi.server.Operation("dbObjects.StandardBestellung getStandardBestellung(int)"),
	new java.rmi.server.Operation("dbObjects.Benutzer getSwBeauftragte()[]"),
	new java.rmi.server.Operation("dbObjects.Benutzer getUser(java.lang.String, java.lang.String)"),
	new java.rmi.server.Operation("dbObjects.Benutzer getUsers()[]"),
	new java.rmi.server.Operation("dbObjects.Benutzer getUsers(dbObjects.Institut)[]"),
	new java.rmi.server.Operation("dbObjects.Benutzer getUsersByRole(dbObjects.Institut, int)[]"),
	new java.rmi.server.Operation("java.util.ArrayList getZVKonten()"),
	new java.rmi.server.Operation("java.util.ArrayList getZVKontenOnly()"),
	new java.rmi.server.Operation("int getZVTitelId(dbObjects.ZVTitel)"),
	new java.rmi.server.Operation("dbObjects.Benutzer login(java.lang.String, java.lang.String)"),
	new java.rmi.server.Operation("void logout()"),
	new java.rmi.server.Operation("void setAccountBudget(dbObjects.Benutzer, dbObjects.FBHauptkonto, float)"),
	new java.rmi.server.Operation("void setBestellung(dbObjects.Benutzer, dbObjects.ASKBestellung, dbObjects.ASKBestellung)"),
	new java.rmi.server.Operation("void setBestellung(dbObjects.Benutzer, dbObjects.StandardBestellung, dbObjects.StandardBestellung)"),
	new java.rmi.server.Operation("int setFBHauptkonto(dbObjects.FBHauptkonto)"),
	new java.rmi.server.Operation("int setFBUnterkonto(dbObjects.FBUnterkonto)"),
	new java.rmi.server.Operation("dbObjects.Fachbereich setFachbereich(dbObjects.Fachbereich, dbObjects.Fachbereich)"),
	new java.rmi.server.Operation("int setFirma(dbObjects.Firma)"),
	new java.rmi.server.Operation("void setHaushaltsjahr(dbObjects.Haushaltsjahr, dbObjects.Haushaltsjahr)"),
	new java.rmi.server.Operation("void setInstitute(dbObjects.Institut, dbObjects.Institut)"),
	new java.rmi.server.Operation("void setKontenZuordnung(dbObjects.FBHauptkonto, dbObjects.Kontenzuordnung)"),
	new java.rmi.server.Operation("void setRolle(dbObjects.Rolle, dbObjects.Rolle)"),
	new java.rmi.server.Operation("void setUser(dbObjects.Benutzer, dbObjects.Benutzer)"),
	new java.rmi.server.Operation("int setZVKonto(dbObjects.ZVKonto)"),
	new java.rmi.server.Operation("int setZVTitel(dbObjects.ZVTitel)"),
	new java.rmi.server.Operation("int setZVUntertitel(dbObjects.ZVUntertitel)")
    };
    
    private static final long interfaceHash = -5325691077988084846L;
    
    public java.rmi.server.Operation[] getOperations() {
	return (java.rmi.server.Operation[]) operations.clone();
    }
    
    public void dispatch(java.rmi.Remote obj, java.rmi.server.RemoteCall call, int opnum, long hash)
	throws java.lang.Exception
    {
	if (opnum < 0) {
	    if (hash == 2018629904499889930L) {
		opnum = 0;
	    } else if (hash == -7141568394395948604L) {
		opnum = 1;
	    } else if (hash == 6525168342380062248L) {
		opnum = 2;
	    } else if (hash == 3107194606724584897L) {
		opnum = 3;
	    } else if (hash == -9194144346870270739L) {
		opnum = 4;
	    } else if (hash == -3583970179989161010L) {
		opnum = 5;
	    } else if (hash == -2730739743943565755L) {
		opnum = 6;
	    } else if (hash == -4177659853049081167L) {
		opnum = 7;
	    } else if (hash == 2142102777982794155L) {
		opnum = 8;
	    } else if (hash == -4004067517523928360L) {
		opnum = 9;
	    } else if (hash == -5437726647760334324L) {
		opnum = 10;
	    } else if (hash == 9027554005221021214L) {
		opnum = 11;
	    } else if (hash == 290566595758402942L) {
		opnum = 12;
	    } else if (hash == -1317476784262082836L) {
		opnum = 13;
	    } else if (hash == -1264608219386161848L) {
		opnum = 14;
	    } else if (hash == -299535951608757931L) {
		opnum = 15;
	    } else if (hash == 3021457282171243963L) {
		opnum = 16;
	    } else if (hash == 7890448751278505492L) {
		opnum = 17;
	    } else if (hash == 5229023204047133144L) {
		opnum = 18;
	    } else if (hash == -1195434699394514895L) {
		opnum = 19;
	    } else if (hash == -8166407972316158362L) {
		opnum = 20;
	    } else if (hash == -6664325241200787024L) {
		opnum = 21;
	    } else if (hash == 7225732700979535805L) {
		opnum = 22;
	    } else if (hash == 7769233202323775240L) {
		opnum = 23;
	    } else if (hash == 7067258562379867425L) {
		opnum = 24;
	    } else if (hash == 5084473296544705979L) {
		opnum = 25;
	    } else if (hash == 8846856844621797200L) {
		opnum = 26;
	    } else if (hash == -5224759650805893156L) {
		opnum = 27;
	    } else if (hash == -1680860033238369119L) {
		opnum = 28;
	    } else if (hash == -2883170820284310930L) {
		opnum = 29;
	    } else if (hash == -737084551344207759L) {
		opnum = 30;
	    } else if (hash == 5255023716445036258L) {
		opnum = 31;
	    } else if (hash == 4724966441718242675L) {
		opnum = 32;
	    } else if (hash == 3491329513710688421L) {
		opnum = 33;
	    } else if (hash == 226447144831845721L) {
		opnum = 34;
	    } else if (hash == -4369024237780905153L) {
		opnum = 35;
	    } else if (hash == -5389849291352052074L) {
		opnum = 36;
	    } else if (hash == 5971802576090395266L) {
		opnum = 37;
	    } else if (hash == 7284200744115060332L) {
		opnum = 38;
	    } else if (hash == -4666816342355502050L) {
		opnum = 39;
	    } else if (hash == -2274442703760382529L) {
		opnum = 40;
	    } else if (hash == -567811436276697477L) {
		opnum = 41;
	    } else if (hash == -1018351192106895100L) {
		opnum = 42;
	    } else if (hash == 4511290000968961498L) {
		opnum = 43;
	    } else if (hash == 3577407778760608627L) {
		opnum = 44;
	    } else if (hash == 4260191179896787742L) {
		opnum = 45;
	    } else if (hash == -7139528806290552764L) {
		opnum = 46;
	    } else if (hash == -373722492910229279L) {
		opnum = 47;
	    } else if (hash == 5766964865087045017L) {
		opnum = 48;
	    } else if (hash == -4912317495160858508L) {
		opnum = 49;
	    } else if (hash == 9061721627610323575L) {
		opnum = 50;
	    } else if (hash == -8773041853394568451L) {
		opnum = 51;
	    } else if (hash == -4550449708954868445L) {
		opnum = 52;
	    } else if (hash == -5374520558832890038L) {
		opnum = 53;
	    } else if (hash == 4659665908752595404L) {
		opnum = 54;
	    } else if (hash == 3314966849312047775L) {
		opnum = 55;
	    } else if (hash == 8648467791866684925L) {
		opnum = 56;
	    } else if (hash == -5122035516259108431L) {
		opnum = 57;
	    } else if (hash == 8344725021367795183L) {
		opnum = 58;
	    } else if (hash == -6867682227654063130L) {
		opnum = 59;
	    } else if (hash == 27058466326926922L) {
		opnum = 60;
	    } else if (hash == 6317137956467216454L) {
		opnum = 61;
	    } else if (hash == 2506649164800270070L) {
		opnum = 62;
	    } else if (hash == 1165981581191234994L) {
		opnum = 63;
	    } else if (hash == -5594928347851691886L) {
		opnum = 64;
	    } else if (hash == 1279390578186283083L) {
		opnum = 65;
	    } else if (hash == 8060504328917123995L) {
		opnum = 66;
	    } else if (hash == 4830644982727885940L) {
		opnum = 67;
	    } else if (hash == -9163243513425107859L) {
		opnum = 68;
	    } else if (hash == -3479095673481886193L) {
		opnum = 69;
	    } else if (hash == -31298424909577749L) {
		opnum = 70;
	    } else if (hash == -93502309665610735L) {
		opnum = 71;
	    } else if (hash == 6902480040832794116L) {
		opnum = 72;
	    } else if (hash == 4638727419777682472L) {
		opnum = 73;
	    } else if (hash == 2386231262600236351L) {
		opnum = 74;
	    } else if (hash == -1505493009211920427L) {
		opnum = 75;
	    } else if (hash == 2638308445376525461L) {
		opnum = 76;
	    } else if (hash == 7933794942774794688L) {
		opnum = 77;
	    } else if (hash == -2314256391406573046L) {
		opnum = 78;
	    } else if (hash == 501138883092039617L) {
		opnum = 79;
	    } else if (hash == 4176581119368034890L) {
		opnum = 80;
	    } else if (hash == 4173076474818309947L) {
		opnum = 81;
	    } else if (hash == -3098460641072066493L) {
		opnum = 82;
	    } else if (hash == -3215881295573068950L) {
		opnum = 83;
	    } else if (hash == 1778860291130592532L) {
		opnum = 84;
	    } else if (hash == 242269189777358345L) {
		opnum = 85;
	    } else if (hash == -3397053694205119836L) {
		opnum = 86;
	    } else if (hash == 920348241328705944L) {
		opnum = 87;
	    } else if (hash == 552054922101026979L) {
		opnum = 88;
	    } else if (hash == -3231724069748232909L) {
		opnum = 89;
	    } else if (hash == 6349123237153146290L) {
		opnum = 90;
	    } else if (hash == -908673309052549770L) {
		opnum = 91;
	    } else if (hash == 2760431180400196529L) {
		opnum = 92;
	    } else if (hash == -1823691546304551198L) {
		opnum = 93;
	    } else {
		throw new java.rmi.UnmarshalException("invalid method hash");
	    }
	} else {
	    if (hash != interfaceHash)
		throw new java.rmi.server.SkeletonMismatchException("interface hash mismatch");
	}
	
	applicationServer.ApplicationServerImpl server = (applicationServer.ApplicationServerImpl) obj;
	switch (opnum) {
	case 0: // addBestellung(ASKBestellung)
	{
	    dbObjects.ASKBestellung $param_ASKBestellung_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_ASKBestellung_1 = (dbObjects.ASKBestellung) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    int $result = server.addBestellung($param_ASKBestellung_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeInt($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 1: // addBestellung(StandardBestellung)
	{
	    dbObjects.StandardBestellung $param_StandardBestellung_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_StandardBestellung_1 = (dbObjects.StandardBestellung) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    int $result = server.addBestellung($param_StandardBestellung_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeInt($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 2: // addFBHauptkonto(FBHauptkonto)
	{
	    dbObjects.FBHauptkonto $param_FBHauptkonto_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_FBHauptkonto_1 = (dbObjects.FBHauptkonto) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    int $result = server.addFBHauptkonto($param_FBHauptkonto_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeInt($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 3: // addFBUnterkonto(FBUnterkonto)
	{
	    dbObjects.FBUnterkonto $param_FBUnterkonto_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_FBUnterkonto_1 = (dbObjects.FBUnterkonto) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    int $result = server.addFBUnterkonto($param_FBUnterkonto_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeInt($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 4: // addFirma(Firma)
	{
	    dbObjects.Firma $param_Firma_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_Firma_1 = (dbObjects.Firma) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    int $result = server.addFirma($param_Firma_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeInt($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 5: // addInstitute(Institut)
	{
	    dbObjects.Institut $param_Institut_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_Institut_1 = (dbObjects.Institut) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    int $result = server.addInstitute($param_Institut_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeInt($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 6: // addKleinbestellung(KleinBestellung)
	{
	    dbObjects.KleinBestellung $param_KleinBestellung_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_KleinBestellung_1 = (dbObjects.KleinBestellung) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    int $result = server.addKleinbestellung($param_KleinBestellung_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeInt($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 7: // addKontenZuordnung(FBHauptkonto, ZVKonto)
	{
	    dbObjects.FBHauptkonto $param_FBHauptkonto_1;
	    dbObjects.ZVKonto $param_ZVKonto_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_FBHauptkonto_1 = (dbObjects.FBHauptkonto) in.readObject();
		$param_ZVKonto_2 = (dbObjects.ZVKonto) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.addKontenZuordnung($param_FBHauptkonto_1, $param_ZVKonto_2);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 8: // addRolle(Rolle)
	{
	    dbObjects.Rolle $param_Rolle_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_Rolle_1 = (dbObjects.Rolle) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    int $result = server.addRolle($param_Rolle_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeInt($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 9: // addRollenAktivitaet(int, int)
	{
	    int $param_int_1;
	    int $param_int_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_int_1 = in.readInt();
		$param_int_2 = in.readInt();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.addRollenAktivitaet($param_int_1, $param_int_2);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 10: // addUser(Benutzer)
	{
	    dbObjects.Benutzer $param_Benutzer_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_Benutzer_1 = (dbObjects.Benutzer) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    int $result = server.addUser($param_Benutzer_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeInt($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 11: // addZVKonto(ZVKonto)
	{
	    dbObjects.ZVKonto $param_ZVKonto_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_ZVKonto_1 = (dbObjects.ZVKonto) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    int $result = server.addZVKonto($param_ZVKonto_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeInt($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 12: // addZVTitel(ZVTitel)
	{
	    dbObjects.ZVTitel $param_ZVTitel_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_ZVTitel_1 = (dbObjects.ZVTitel) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    int $result = server.addZVTitel($param_ZVTitel_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeInt($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 13: // addZVUntertitel(ZVUntertitel)
	{
	    dbObjects.ZVUntertitel $param_ZVUntertitel_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_ZVUntertitel_1 = (dbObjects.ZVUntertitel) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    int $result = server.addZVUntertitel($param_ZVUntertitel_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeInt($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 14: // buche(Benutzer, FBHauptkonto, FBHauptkonto, float)
	{
	    dbObjects.Benutzer $param_Benutzer_1;
	    dbObjects.FBHauptkonto $param_FBHauptkonto_2;
	    dbObjects.FBHauptkonto $param_FBHauptkonto_3;
	    float $param_float_4;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_Benutzer_1 = (dbObjects.Benutzer) in.readObject();
		$param_FBHauptkonto_2 = (dbObjects.FBHauptkonto) in.readObject();
		$param_FBHauptkonto_3 = (dbObjects.FBHauptkonto) in.readObject();
		$param_float_4 = in.readFloat();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.buche($param_Benutzer_1, $param_FBHauptkonto_2, $param_FBHauptkonto_3, $param_float_4);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 15: // buche(Benutzer, FBHauptkonto, FBUnterkonto, float)
	{
	    dbObjects.Benutzer $param_Benutzer_1;
	    dbObjects.FBHauptkonto $param_FBHauptkonto_2;
	    dbObjects.FBUnterkonto $param_FBUnterkonto_3;
	    float $param_float_4;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_Benutzer_1 = (dbObjects.Benutzer) in.readObject();
		$param_FBHauptkonto_2 = (dbObjects.FBHauptkonto) in.readObject();
		$param_FBUnterkonto_3 = (dbObjects.FBUnterkonto) in.readObject();
		$param_float_4 = in.readFloat();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.buche($param_Benutzer_1, $param_FBHauptkonto_2, $param_FBUnterkonto_3, $param_float_4);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 16: // buche(Benutzer, FBUnterkonto, FBHauptkonto, float)
	{
	    dbObjects.Benutzer $param_Benutzer_1;
	    dbObjects.FBUnterkonto $param_FBUnterkonto_2;
	    dbObjects.FBHauptkonto $param_FBHauptkonto_3;
	    float $param_float_4;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_Benutzer_1 = (dbObjects.Benutzer) in.readObject();
		$param_FBUnterkonto_2 = (dbObjects.FBUnterkonto) in.readObject();
		$param_FBHauptkonto_3 = (dbObjects.FBHauptkonto) in.readObject();
		$param_float_4 = in.readFloat();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.buche($param_Benutzer_1, $param_FBUnterkonto_2, $param_FBHauptkonto_3, $param_float_4);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 17: // buche(Benutzer, ZVKonto, float)
	{
	    dbObjects.Benutzer $param_Benutzer_1;
	    dbObjects.ZVKonto $param_ZVKonto_2;
	    float $param_float_3;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_Benutzer_1 = (dbObjects.Benutzer) in.readObject();
		$param_ZVKonto_2 = (dbObjects.ZVKonto) in.readObject();
		$param_float_3 = in.readFloat();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.buche($param_Benutzer_1, $param_ZVKonto_2, $param_float_3);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 18: // buche(Benutzer, ZVTitel, float)
	{
	    dbObjects.Benutzer $param_Benutzer_1;
	    dbObjects.ZVTitel $param_ZVTitel_2;
	    float $param_float_3;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_Benutzer_1 = (dbObjects.Benutzer) in.readObject();
		$param_ZVTitel_2 = (dbObjects.ZVTitel) in.readObject();
		$param_float_3 = in.readFloat();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.buche($param_Benutzer_1, $param_ZVTitel_2, $param_float_3);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 19: // buche(Benutzer, ZVUntertitel, float)
	{
	    dbObjects.Benutzer $param_Benutzer_1;
	    dbObjects.ZVUntertitel $param_ZVUntertitel_2;
	    float $param_float_3;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_Benutzer_1 = (dbObjects.Benutzer) in.readObject();
		$param_ZVUntertitel_2 = (dbObjects.ZVUntertitel) in.readObject();
		$param_float_3 = in.readFloat();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.buche($param_Benutzer_1, $param_ZVUntertitel_2, $param_float_3);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 20: // delBestellung(ASKBestellung)
	{
	    dbObjects.ASKBestellung $param_ASKBestellung_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_ASKBestellung_1 = (dbObjects.ASKBestellung) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.delBestellung($param_ASKBestellung_1);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 21: // delBestellung(StandardBestellung)
	{
	    dbObjects.StandardBestellung $param_StandardBestellung_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_StandardBestellung_1 = (dbObjects.StandardBestellung) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.delBestellung($param_StandardBestellung_1);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 22: // delFBHauptkonto(FBHauptkonto)
	{
	    dbObjects.FBHauptkonto $param_FBHauptkonto_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_FBHauptkonto_1 = (dbObjects.FBHauptkonto) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    int $result = server.delFBHauptkonto($param_FBHauptkonto_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeInt($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 23: // delFBUnterkonto(FBUnterkonto)
	{
	    dbObjects.FBUnterkonto $param_FBUnterkonto_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_FBUnterkonto_1 = (dbObjects.FBUnterkonto) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    int $result = server.delFBUnterkonto($param_FBUnterkonto_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeInt($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 24: // delFirma(Firma)
	{
	    dbObjects.Firma $param_Firma_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_Firma_1 = (dbObjects.Firma) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    int $result = server.delFirma($param_Firma_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeInt($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 25: // delInstitute(Institut)
	{
	    dbObjects.Institut $param_Institut_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_Institut_1 = (dbObjects.Institut) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.delInstitute($param_Institut_1);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 26: // delKleinbestellung(KleinBestellung)
	{
	    dbObjects.KleinBestellung $param_KleinBestellung_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_KleinBestellung_1 = (dbObjects.KleinBestellung) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    int $result = server.delKleinbestellung($param_KleinBestellung_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeInt($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 27: // delKontenZuordnung(FBHauptkonto, ZVKonto)
	{
	    dbObjects.FBHauptkonto $param_FBHauptkonto_1;
	    dbObjects.ZVKonto $param_ZVKonto_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_FBHauptkonto_1 = (dbObjects.FBHauptkonto) in.readObject();
		$param_ZVKonto_2 = (dbObjects.ZVKonto) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.delKontenZuordnung($param_FBHauptkonto_1, $param_ZVKonto_2);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 28: // delRolle(Rolle)
	{
	    dbObjects.Rolle $param_Rolle_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_Rolle_1 = (dbObjects.Rolle) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.delRolle($param_Rolle_1);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 29: // delRollenAktivitaet(int, int)
	{
	    int $param_int_1;
	    int $param_int_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_int_1 = in.readInt();
		$param_int_2 = in.readInt();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.delRollenAktivitaet($param_int_1, $param_int_2);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 30: // delUser(Benutzer)
	{
	    dbObjects.Benutzer $param_Benutzer_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_Benutzer_1 = (dbObjects.Benutzer) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.delUser($param_Benutzer_1);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 31: // delZVKonto(ZVKonto)
	{
	    dbObjects.ZVKonto $param_ZVKonto_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_ZVKonto_1 = (dbObjects.ZVKonto) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    int $result = server.delZVKonto($param_ZVKonto_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeInt($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 32: // delZVTitel(ZVTitel)
	{
	    dbObjects.ZVTitel $param_ZVTitel_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_ZVTitel_1 = (dbObjects.ZVTitel) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    int $result = server.delZVTitel($param_ZVTitel_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeInt($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 33: // delZVUntertitel(ZVUntertitel)
	{
	    dbObjects.ZVUntertitel $param_ZVUntertitel_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_ZVUntertitel_1 = (dbObjects.ZVUntertitel) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    int $result = server.delZVUntertitel($param_ZVUntertitel_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeInt($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 34: // getASKBestellung(int)
	{
	    int $param_int_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_int_1 = in.readInt();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    dbObjects.ASKBestellung $result = server.getASKBestellung($param_int_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 35: // getASKFirma()
	{
	    call.releaseInputStream();
	    dbObjects.Firma $result = server.getASKFirma();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 36: // getAktivitaeten()
	{
	    call.releaseInputStream();
	    dbObjects.Aktivitaet[] $result = server.getAktivitaeten();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 37: // getAvailableAccountBudget(ZVKonto)
	{
	    dbObjects.ZVKonto $param_ZVKonto_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_ZVKonto_1 = (dbObjects.ZVKonto) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    float $result = server.getAvailableAccountBudget($param_ZVKonto_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeFloat($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 38: // getAvailableBudgetForAccount(FBHauptkonto)
	{
	    dbObjects.FBHauptkonto $param_FBHauptkonto_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_FBHauptkonto_1 = (dbObjects.FBHauptkonto) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    float $result = server.getAvailableBudgetForAccount($param_FBHauptkonto_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeFloat($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 39: // getAvailableNoPurposeBudget()
	{
	    call.releaseInputStream();
	    float $result = server.getAvailableNoPurposeBudget();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeFloat($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 40: // getBestellungen()
	{
	    call.releaseInputStream();
	    java.util.ArrayList $result = server.getBestellungen();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 41: // getBestellungen(int)
	{
	    int $param_int_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_int_1 = in.readInt();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    java.util.ArrayList $result = server.getBestellungen($param_int_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 42: // getCurrentHaushaltsjahrId()
	{
	    call.releaseInputStream();
	    int $result = server.getCurrentHaushaltsjahrId();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeInt($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 43: // getDelKleinbestellungen()
	{
	    call.releaseInputStream();
	    java.util.ArrayList $result = server.getDelKleinbestellungen();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 44: // getFBHauptkonten(Institut)
	{
	    dbObjects.Institut $param_Institut_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_Institut_1 = (dbObjects.Institut) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    java.util.ArrayList $result = server.getFBHauptkonten($param_Institut_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 45: // getFBKontenForUser(Benutzer)
	{
	    dbObjects.Benutzer $param_Benutzer_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_Benutzer_1 = (dbObjects.Benutzer) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    dbObjects.Institut[] $result = server.getFBKontenForUser($param_Benutzer_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 46: // getFBKonto(int)
	{
	    int $param_int_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_int_1 = in.readInt();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    dbObjects.FBUnterkonto $result = server.getFBKonto($param_int_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 47: // getFBUnterkonten(Institut, FBHauptkonto)
	{
	    dbObjects.Institut $param_Institut_1;
	    dbObjects.FBHauptkonto $param_FBHauptkonto_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_Institut_1 = (dbObjects.Institut) in.readObject();
		$param_FBHauptkonto_2 = (dbObjects.FBHauptkonto) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    java.util.ArrayList $result = server.getFBUnterkonten($param_Institut_1, $param_FBHauptkonto_2);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 48: // getFachbereiche()
	{
	    call.releaseInputStream();
	    dbObjects.Fachbereich[] $result = server.getFachbereiche();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 49: // getFirmen()
	{
	    call.releaseInputStream();
	    java.util.ArrayList $result = server.getFirmen();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 50: // getHaushaltsjahr()
	{
	    call.releaseInputStream();
	    dbObjects.Haushaltsjahr $result = server.getHaushaltsjahr();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 51: // getInstitutZuordnungen()
	{
	    call.releaseInputStream();
	    dbObjects.Institut[] $result = server.getInstitutZuordnungen();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 52: // getInstituteWithAccounts(Institut, boolean)
	{
	    dbObjects.Institut $param_Institut_1;
	    boolean $param_boolean_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_Institut_1 = (dbObjects.Institut) in.readObject();
		$param_boolean_2 = in.readBoolean();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    dbObjects.Institut[] $result = server.getInstituteWithAccounts($param_Institut_1, $param_boolean_2);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 53: // getInstitutes()
	{
	    call.releaseInputStream();
	    dbObjects.Institut[] $result = server.getInstitutes();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 54: // getInstitutesWithAccounts()
	{
	    call.releaseInputStream();
	    dbObjects.Institut[] $result = server.getInstitutesWithAccounts();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 55: // getInstitutesWithAccounts(boolean)
	{
	    boolean $param_boolean_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_boolean_1 = in.readBoolean();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    dbObjects.Institut[] $result = server.getInstitutesWithAccounts($param_boolean_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 56: // getInstitutesWithMainAccounts()
	{
	    call.releaseInputStream();
	    dbObjects.Institut[] $result = server.getInstitutesWithMainAccounts();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 57: // getKleinbestellung(int)
	{
	    int $param_int_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_int_1 = in.readInt();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    dbObjects.KleinBestellung $result = server.getKleinbestellung($param_int_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 58: // getKleinbestellungen()
	{
	    call.releaseInputStream();
	    java.util.ArrayList $result = server.getKleinbestellungen();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 59: // getKostenarten()
	{
	    call.releaseInputStream();
	    dbObjects.Kostenart[] $result = server.getKostenarten();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 60: // getLogList(Date, Date)
	{
	    java.sql.Date $param_Date_1;
	    java.sql.Date $param_Date_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_Date_1 = (java.sql.Date) in.readObject();
		$param_Date_2 = (java.sql.Date) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    java.util.ArrayList $result = server.getLogList($param_Date_1, $param_Date_2);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 61: // getName()
	{
	    call.releaseInputStream();
	    java.lang.String $result = server.getName();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 62: // getNoPurposeFBHauptkonten(Institut)
	{
	    dbObjects.Institut $param_Institut_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_Institut_1 = (dbObjects.Institut) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    java.util.ArrayList $result = server.getNoPurposeFBHauptkonten($param_Institut_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 63: // getNumberOfKontenzuordnungen(ZVKonto)
	{
	    dbObjects.ZVKonto $param_ZVKonto_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_ZVKonto_1 = (dbObjects.ZVKonto) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    int $result = server.getNumberOfKontenzuordnungen($param_ZVKonto_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeInt($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 64: // getOffeneZVKonten(int)
	{
	    int $param_int_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_int_1 = in.readInt();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    java.util.ArrayList $result = server.getOffeneZVKonten($param_int_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 65: // getReport(int, Date, Date)
	{
	    int $param_int_1;
	    java.sql.Date $param_Date_2;
	    java.sql.Date $param_Date_3;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_int_1 = in.readInt();
		$param_Date_2 = (java.sql.Date) in.readObject();
		$param_Date_3 = (java.sql.Date) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    java.util.ArrayList $result = server.getReport($param_int_1, $param_Date_2, $param_Date_3);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 66: // getRollen()
	{
	    call.releaseInputStream();
	    dbObjects.Rolle[] $result = server.getRollen();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 67: // getRollenFull()
	{
	    call.releaseInputStream();
	    dbObjects.Rolle[] $result = server.getRollenFull();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 68: // getStandardBestellung(int)
	{
	    int $param_int_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_int_1 = in.readInt();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    dbObjects.StandardBestellung $result = server.getStandardBestellung($param_int_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 69: // getSwBeauftragte()
	{
	    call.releaseInputStream();
	    dbObjects.Benutzer[] $result = server.getSwBeauftragte();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 70: // getUser(String, String)
	{
	    java.lang.String $param_String_1;
	    java.lang.String $param_String_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_String_2 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    dbObjects.Benutzer $result = server.getUser($param_String_1, $param_String_2);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 71: // getUsers()
	{
	    call.releaseInputStream();
	    dbObjects.Benutzer[] $result = server.getUsers();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 72: // getUsers(Institut)
	{
	    dbObjects.Institut $param_Institut_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_Institut_1 = (dbObjects.Institut) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    dbObjects.Benutzer[] $result = server.getUsers($param_Institut_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 73: // getUsersByRole(Institut, int)
	{
	    dbObjects.Institut $param_Institut_1;
	    int $param_int_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_Institut_1 = (dbObjects.Institut) in.readObject();
		$param_int_2 = in.readInt();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    dbObjects.Benutzer[] $result = server.getUsersByRole($param_Institut_1, $param_int_2);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 74: // getZVKonten()
	{
	    call.releaseInputStream();
	    java.util.ArrayList $result = server.getZVKonten();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 75: // getZVKontenOnly()
	{
	    call.releaseInputStream();
	    java.util.ArrayList $result = server.getZVKontenOnly();
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 76: // getZVTitelId(ZVTitel)
	{
	    dbObjects.ZVTitel $param_ZVTitel_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_ZVTitel_1 = (dbObjects.ZVTitel) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    int $result = server.getZVTitelId($param_ZVTitel_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeInt($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 77: // login(String, String)
	{
	    java.lang.String $param_String_1;
	    java.lang.String $param_String_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_String_2 = (java.lang.String) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    dbObjects.Benutzer $result = server.login($param_String_1, $param_String_2);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 78: // logout()
	{
	    call.releaseInputStream();
	    server.logout();
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 79: // setAccountBudget(Benutzer, FBHauptkonto, float)
	{
	    dbObjects.Benutzer $param_Benutzer_1;
	    dbObjects.FBHauptkonto $param_FBHauptkonto_2;
	    float $param_float_3;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_Benutzer_1 = (dbObjects.Benutzer) in.readObject();
		$param_FBHauptkonto_2 = (dbObjects.FBHauptkonto) in.readObject();
		$param_float_3 = in.readFloat();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.setAccountBudget($param_Benutzer_1, $param_FBHauptkonto_2, $param_float_3);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 80: // setBestellung(Benutzer, ASKBestellung, ASKBestellung)
	{
	    dbObjects.Benutzer $param_Benutzer_1;
	    dbObjects.ASKBestellung $param_ASKBestellung_2;
	    dbObjects.ASKBestellung $param_ASKBestellung_3;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_Benutzer_1 = (dbObjects.Benutzer) in.readObject();
		$param_ASKBestellung_2 = (dbObjects.ASKBestellung) in.readObject();
		$param_ASKBestellung_3 = (dbObjects.ASKBestellung) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.setBestellung($param_Benutzer_1, $param_ASKBestellung_2, $param_ASKBestellung_3);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 81: // setBestellung(Benutzer, StandardBestellung, StandardBestellung)
	{
	    dbObjects.Benutzer $param_Benutzer_1;
	    dbObjects.StandardBestellung $param_StandardBestellung_2;
	    dbObjects.StandardBestellung $param_StandardBestellung_3;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_Benutzer_1 = (dbObjects.Benutzer) in.readObject();
		$param_StandardBestellung_2 = (dbObjects.StandardBestellung) in.readObject();
		$param_StandardBestellung_3 = (dbObjects.StandardBestellung) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.setBestellung($param_Benutzer_1, $param_StandardBestellung_2, $param_StandardBestellung_3);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 82: // setFBHauptkonto(FBHauptkonto)
	{
	    dbObjects.FBHauptkonto $param_FBHauptkonto_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_FBHauptkonto_1 = (dbObjects.FBHauptkonto) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    int $result = server.setFBHauptkonto($param_FBHauptkonto_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeInt($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 83: // setFBUnterkonto(FBUnterkonto)
	{
	    dbObjects.FBUnterkonto $param_FBUnterkonto_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_FBUnterkonto_1 = (dbObjects.FBUnterkonto) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    int $result = server.setFBUnterkonto($param_FBUnterkonto_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeInt($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 84: // setFachbereich(Fachbereich, Fachbereich)
	{
	    dbObjects.Fachbereich $param_Fachbereich_1;
	    dbObjects.Fachbereich $param_Fachbereich_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_Fachbereich_1 = (dbObjects.Fachbereich) in.readObject();
		$param_Fachbereich_2 = (dbObjects.Fachbereich) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    dbObjects.Fachbereich $result = server.setFachbereich($param_Fachbereich_1, $param_Fachbereich_2);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeObject($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 85: // setFirma(Firma)
	{
	    dbObjects.Firma $param_Firma_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_Firma_1 = (dbObjects.Firma) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    int $result = server.setFirma($param_Firma_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeInt($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 86: // setHaushaltsjahr(Haushaltsjahr, Haushaltsjahr)
	{
	    dbObjects.Haushaltsjahr $param_Haushaltsjahr_1;
	    dbObjects.Haushaltsjahr $param_Haushaltsjahr_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_Haushaltsjahr_1 = (dbObjects.Haushaltsjahr) in.readObject();
		$param_Haushaltsjahr_2 = (dbObjects.Haushaltsjahr) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.setHaushaltsjahr($param_Haushaltsjahr_1, $param_Haushaltsjahr_2);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 87: // setInstitute(Institut, Institut)
	{
	    dbObjects.Institut $param_Institut_1;
	    dbObjects.Institut $param_Institut_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_Institut_1 = (dbObjects.Institut) in.readObject();
		$param_Institut_2 = (dbObjects.Institut) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.setInstitute($param_Institut_1, $param_Institut_2);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 88: // setKontenZuordnung(FBHauptkonto, Kontenzuordnung)
	{
	    dbObjects.FBHauptkonto $param_FBHauptkonto_1;
	    dbObjects.Kontenzuordnung $param_Kontenzuordnung_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_FBHauptkonto_1 = (dbObjects.FBHauptkonto) in.readObject();
		$param_Kontenzuordnung_2 = (dbObjects.Kontenzuordnung) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.setKontenZuordnung($param_FBHauptkonto_1, $param_Kontenzuordnung_2);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 89: // setRolle(Rolle, Rolle)
	{
	    dbObjects.Rolle $param_Rolle_1;
	    dbObjects.Rolle $param_Rolle_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_Rolle_1 = (dbObjects.Rolle) in.readObject();
		$param_Rolle_2 = (dbObjects.Rolle) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.setRolle($param_Rolle_1, $param_Rolle_2);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 90: // setUser(Benutzer, Benutzer)
	{
	    dbObjects.Benutzer $param_Benutzer_1;
	    dbObjects.Benutzer $param_Benutzer_2;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_Benutzer_1 = (dbObjects.Benutzer) in.readObject();
		$param_Benutzer_2 = (dbObjects.Benutzer) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.setUser($param_Benutzer_1, $param_Benutzer_2);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 91: // setZVKonto(ZVKonto)
	{
	    dbObjects.ZVKonto $param_ZVKonto_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_ZVKonto_1 = (dbObjects.ZVKonto) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    int $result = server.setZVKonto($param_ZVKonto_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeInt($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 92: // setZVTitel(ZVTitel)
	{
	    dbObjects.ZVTitel $param_ZVTitel_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_ZVTitel_1 = (dbObjects.ZVTitel) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    int $result = server.setZVTitel($param_ZVTitel_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeInt($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 93: // setZVUntertitel(ZVUntertitel)
	{
	    dbObjects.ZVUntertitel $param_ZVUntertitel_1;
	    try {
		java.io.ObjectInput in = call.getInputStream();
		$param_ZVUntertitel_1 = (dbObjects.ZVUntertitel) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    int $result = server.setZVUntertitel($param_ZVUntertitel_1);
	    try {
		java.io.ObjectOutput out = call.getResultStream(true);
		out.writeInt($result);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	default:
	    throw new java.rmi.UnmarshalException("invalid method number");
	}
    }
}
